# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
imports:
    - { resource: legacy_aliases.yml }


services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false

    # makes classes in src/Librecores/ProjectRepoBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Librecores\ProjectRepoBundle\:
        resource: '../../../ProjectRepoBundle/*'
        exclude: '../../../ProjectRepoBundle/{Entity, DataFixtures}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Librecores\ProjectRepoBundle\Controller\:
        resource: '../../../ProjectRepoBundle/Controller'
        tags: ['controller.service_arguments']


    # Consumer Services (called through RabbitMQ)
    Librecores\ProjectRepoBundle\Consumer\UpdateProjectInformation:
        arguments:
            - '@librecores.repocrawlerfactory'
            - '@logger'
            - '@doctrine'

    # Utilities
    Librecores\ProjectRepoBundle\Util\MarkupToHtmlConverter:
        arguments:
            - '@logger'
            - '@exercise_html_purifier.default'

    Librecores\ProjectRepoBundle\Util\GithubApiService:
        arguments:
            - '@security.token_storage'
            - '@app.cache.githubapi'
            - '@router'

    Librecores\ProjectRepoBundle\Util\QueueDispatcherService:
        calls:
            - [setContainer, ['@service_container']]

    # Forms
    Librecores\ProjectRepoBundle\Form\Type\ProjectType:
        tags:
            - { name: form.type, alias: project }

    Librecores\ProjectRepoBundle\Form\Type\OrganizationType:
        tags:
            - { name: form.type, alias: organization }

    Librecores\ProjectRepoBundle\Form\Extension\ButtonTypeIconExtension:
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\ButtonType }

    Librecores\ProjectRepoBundle\Form\Type\PurifiedTextareaType:
        arguments:
          - '@librecores.form.transformer.html_purifier'
        tags:
            - { name: form.type, alias: purified_textarea }

    Exercise\HTMLPurifierBundle\Form\HTMLPurifierTransformer:
        arguments:
            - '@exercise_html_purifier.default'

    # User/auth management
    Librecores\ProjectRepoBundle\Doctrine\UserManager:
        arguments:
          - '@fos_user.util.password_updater'
          - '@fos_user.util.canonical_fields_updater'
          - '@fos_user.object_manager'
          - '%fos_user.model.user.class%'

    Librecores\ProjectRepoBundle\Security\Core\User\LibreCoresUserProvider:
        arguments:
            - '@fos_user.user_manager'
            - '@validator'
            - '@session'

    Librecores\ProjectRepoBundle\EventListener\OAuthRegistrationListener:
        arguments:
            - '@fos_user.user_manager'
            - '@librecores_user_provider'
            - '@session'
        tags:
            - { name: kernel.event_subscriber }

    # Security
    Librecores\ProjectRepoBundle\Security\ProjectVoter:
        tags:
            - { name: security.voter }
        public: false

    Librecores\ProjectRepoBundle\Util\ProcessCreator: ~

    Librecores\ProjectRepoBundle\RepoCrawler\RepoCrawlerFactory:
        arguments:
            - '@librecores.util.markuptohtmlconverter'
            - '@logger'
            - '@doctrine.orm.default_entity_manager'
            - '@librecores.process_creator'
            - '@librecores.util.githubapiservice'
