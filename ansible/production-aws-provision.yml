---
# Initial setup of AWS environment to host all LibreCores instances
- name: Create AWS initial setup
  hosts: localhost
  connection: local
  gather_facts: False

  tasks:
    - name: "Create EC2 security group"
      ec2_group:
        name: librecores-production-web
        description: "Librecores web security group"
        region: "{{ aws_region }}"
        rules:
          # allow incoming traffic for HTTP(S) and SSH
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          # allow all outgoing traffic
          - proto: -1
            from_port: 0
            to_port: 0
            cidr_ip: 0.0.0.0/0

    - name: "Production: Create SSH key"
      ec2_key:
        region: "{{ aws_region }}"
        name: librecores-production
        key_material: "{{ ssh_key_production_pub }}"
        wait: true

    - name: "Production: Provision EC2 instance"
      ec2:
         instance_type: t2.medium
         region: "{{ aws_region }}"
         image: "{{ ami_id }}"
         key_name: librecores-production
         group: librecores-production-web
         wait: true
         exact_count: 1
         count_tag:
            group: librecores-production
         instance_tags:
            group: librecores-production
      register: instance_production_ec2_web

    - name: "Production: Create and attach EBS volume to instance"
      ec2_vol:
        instance: "{{ instance_production_ec2_web.tagged_instances[0].id }}"
        region: "{{ aws_region }}"
        device_name: /dev/sdf
        volume_size: 40 # GB
        volume_type: gp2 # general-purpose SSD
        encrypted: no
        delete_on_termination: no

    - name: "Production: Assign Elastic IP (public)"
      ec2_eip:
        region: "{{ aws_region }}"
        public_ip: "{{ ip_public }}"
        reuse_existing_ip_allowed: yes
        state: present
        device_id: "{{ instance_production_ec2_web.tagged_instances[0].id }}"
        in_vpc: yes

    - name: Delete any existing SSH key for that host
      shell: ssh-keygen -R {{ ip_public }}

    - name: Wait for SSH
      wait_for:
        host: "{{ ip_public }}"
        port: 22
        delay: 10
        timeout: 320
        state: started

    - name: Refresh the ec2.py cache
      # XXX: Find a way to make this work when not calling ansible from the
      # top source directory.
      shell: ./ansible/ec2.py --refresh-cache

    - name: Refresh inventory
      meta: refresh_inventory

  vars_files:
    - vars/production-aws.yml
    - secrets/production-aws-sshkeys.secrets.yml

- name: Install python2 on instance
  hosts: tag_group_librecores_production
  gather_facts: False
  user: ubuntu
  become: true
  tasks:
    - name: 'install python2'
      raw: sudo apt-get -y install python-simplejson

- name: Prepare EBS disk
  hosts: tag_group_librecores_production
  gather_facts: True
  user: ubuntu
  become: true
  tasks:
    - name: Format disk
      filesystem: fstype=ext4 dev=/dev/xvdf
    - name: Mount volume
      mount:
        name: /data
        src: /dev/xvdf
        opts: noatime
        fstype: ext4
        state: mounted
