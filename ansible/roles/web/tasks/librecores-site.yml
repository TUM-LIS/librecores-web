---
# general site
# SSL certificates
- name: Ensure HTTP-accessible directory for letsencrypt cert renewal exists
  file: dest=/var/www/letsencrypt/.well-known state=directory
  when: use_https

- name: Obtain initial SSL certificate from Let's Encrypt
  command: letsencrypt certonly --pre-hook "service nginx stop" --non-interactive --standalone --standalone-supported-challenges http-01 --keep -m philipp@fossi-foundation.org --agree-tos -w /var/www/letsencrypt -d {{ librecores_domain }} -d www.{{ librecores_domain }}
  args:
    creates: /etc/letsencrypt/live/{{ librecores_domain }}/cert.pem
  when: use_https

# Let's Encrypt cert renewal
- name: Install Let's Encrypt Cert Renewal service
  template: src=letsencrypt-renew.service dest=/etc/systemd/system/letsencrypt-renew.service
  when: use_https

- name: Install Let's Encrypt Cert Renewal timer
  template: src=letsencrypt-renew.timer dest=/etc/systemd/system/letsencrypt-renew.timer
  when: use_https

# nginx (web server)
- name: Ensure nginx log directory exists
  file: dest=/var/log/nginx/librecores state=directory

- name: Change default nginx site
  template: src=nginx/librecores.tpl dest=/etc/nginx/sites-available/default
  notify: restart nginx

- name: Install librecores snippet into nginx
  template: src=nginx/snippet-librecores.conf.tpl dest=/etc/nginx/snippets/{{ librecores_domain }}.conf
  notify: restart nginx

# nginx SSL configuration
- name: Create Diffie-Hellman Group (may take a while)
  command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 creates=/etc/ssl/certs/dhparam.pem
  notify: restart nginx
  when: use_https

- name: nginx SSL configuration snippet
  template: src=nginx/snippet-ssl-params.conf.tpl dest=/etc/nginx/snippets/ssl-params.conf
  notify: restart nginx
  when: use_https

- name: nginx SSL certificate snippet
  template: src=nginx/snippet-ssl-certs.conf.tpl dest=/etc/nginx/snippets/ssl-{{ librecores_domain }}.conf
  notify: restart nginx
  when: use_https

# symfony (main application)

# we need to work around ansible trying to chown a file on NFS, which
# is not possible. See https://github.com/ansible/ansible/issues/7372

- name: Create Symfony environment shell file (part I, populate template in temp folder)
  template: src=symfony-env.sh.j2 dest=/tmp/symfony-env.sh

- name: Create Symfony environment shell file (part II, move to destination)
  command: mv /tmp/symfony-env.sh /var/www/lc/site/app/config/symfony-env.sh

- name: Create Symfony configuration (part I, populate template in temp folder)
  template: src=parameters.yml.j2 dest=/tmp/parameters.yml

- name: Create symfony configuration (part II, move to destination)
  command: mv /tmp/parameters.yml /var/www/lc/site/app/config/parameters.yml

- name: Create frontend configuration (part I, populate template in temp folder)
  template: src=frontend-config.json.j2 dest=/tmp/frontend-config.json

- name: Create frontend configuration (part II, move to destination)
  command: mv /tmp/frontend-config.json /var/www/lc/site/assets/js/frontend-config.json

- name: "Create composer configuration directory for user {{ web_user }}"
  file:
    path: "{{ web_user_home }}/.config/composer"
    state: directory
    recurse: yes
    owner: "{{ web_user }}"

- name: Copy composer configuration for deployment user
  copy:
    src: roles/web/templates/composer-config.json
    dest: "{{ web_user_home }}/.config/composer/config.json"
    owner: "{{ web_user }}"
    mode: 0644

- name: Install PHP dependencies through composer (development)
  command: composer install
  args:
    chdir: /var/www/lc/site
  when: env.SYMFONY_ENV == 'dev'

- name: Install PHP dependencies through composer (production)
  command: composer install --no-dev --optimize-autoloader
  environment: "{{ env }}"
  args:
    chdir: /var/www/lc/site
  when: env.SYMFONY_ENV == 'prod'

- name: Install frontend dependencies through yarn (can take multiple minutes)
  command: yarn install --frozen-lockfile
  environment: "{{ env }}"
  args:
    chdir: /var/www/lc/site

- name: Build frontend code through webpack (production)
  command: yarn build
  environment: "{{ env }}"
  args:
    chdir: /var/www/lc/site
  when: env.NODE_ENV == 'production'

- name: Build frontend code through webpack (development)
  command: yarn dev
  environment: "{{ env }}"
  args:
    chdir: /var/www/lc/site
  when: env.NODE_ENV != 'production'

- name: Clear symfony cache (production)
  command: php bin/console cache:clear
  environment: "{{ env }}"
  args:
    chdir: /var/www/lc/site
  when: env.SYMFONY_ENV == 'prod'

- name: Remove old systemd service
  file:
    path: /etc/systemd/system/librecores-rabbitmq.service
    state: absent

- name: Add systemd services for individual RabbitMQ consumers
  template:
    src: lc-rmqc.service.j2
    dest: /etc/systemd/system/lc-rmqc-{{ item.name }}.service
    owner: root
    group: root
    mode: 0644
  with_items: "{{ rabbitmq_consumers }}"

- name: Add systemd target for all RabbitMQ consumers
  template:
    src: lc-rmqc.target.j2
    dest: /etc/systemd/system/lc-rmqc.target
    owner: root
    group: root
    mode: 0644

- name: Reload systemd to pick up changes in unit files
  command: systemctl daemon-reload

# run this last to ensure all deployment-created directories are covered
- name: Ensure directory permissions of Symfony log and cache directories
  file:
    path: "/var/www/lc/site/var/{{ item }}"
    owner: "{{ web_user }}"
    recurse: yes
  with_items:
    - logs
    - cache
  when: not is_vagrant_environment

# The services need to pick up the code changes by being restarted.
# Thanks to RabbitMQ we don't loose any messages in this case.
- name: Ensure RabbitMQ consumer services are restarted and enabled at boot
  service:
    name: lc-rmqc.target
    state: restarted
    enabled: yes

# Install librecores planet generator
- name: Install extra packages for librecores-planet
  apt:
    state: present
    pkg:
      - python-libxslt1

- name: Update planet every 30 minutes through cronjob
  cron:
    minute="*/30" hour="*" weekday="*"
    name="Update Planet LibreCores"
    cron_file="librecores-planet-update"
    user="{{ web_user }}"
    job="/var/www/lc/planet/generate.sh"

- name: Ensure directory permissions of planet cache directories
  command: chown -R {{ web_user }} /var/www/lc/planet/cache
  when: not is_vagrant_environment

- name: Ensure directory permissions of web-accessible planet output directory
  command: chown -R {{ web_user }} /var/www/lc/site/web/planet
  when: not is_vagrant_environment


- name: ensure nginx is running (and enable it at boot)
  service: name=nginx state=started enabled=yes

- name: ensure letsencrypt-renew.timer is running (and enable it at boot)
  service: name=letsencrypt-renew.timer state=started enabled=yes
  when: use_https

- name: Restart all services (we need them from now on)
  meta: flush_handlers

- name: Run all database migrations (also creates initial tables if necessary)
  become: true
  become_user: "{{ web_user }}"
  command: php bin/console doctrine:migrations:migrate -n
  environment: "{{ env }}"
  args:
    chdir: /var/www/lc/site

- name: Insert classifications into DB from YAML configuration file
  become: true
  become_user: "{{ web_user }}"
  command: php bin/console librecores:insert-classifications
  environment: "{{ env }}"
  args:
    chdir: /var/www/lc/site
